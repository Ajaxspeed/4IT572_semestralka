- name: Deploy to EC2
  hosts: localhost
  connection: local

  tasks:
    - name: Launch EC2 instance
      ec2_instance:
        instance_type: t3.medium
        image_id: ami-04e5276ebb8451442
        region: us-east-1
        key_name: devops2
        vpc_subnet_id: subnet-0e77b0b58b76074b6
        tags:
          Name: Eshop_final
        network:
          assign_public_ip: yes
        wait: yes
        count: 1
        security_group: eshop
        aws_access_key: "{{ access_key }}"
        aws_secret_key: "{{ secret_key }}"
        security_token: "{{ session_token }}"
      register: ec2_instance_result

    - set_fact:
        current_instance_id: "{{ ec2_instance_result.instances | last }}"

    - name: Add instance host to group
      add_host:
        hostname: "{{ item.public_ip_address }}"
        groupname: launched
      loop: "{{ ec2_instance_result.instances }}"

    - name: Wait for SSH connection
      delegate_to: "{{ item.public_dns_name }}"
      wait_for_connection:
        delay: 30
        timeout: 400
      loop: "{{ ec2_instance_result.instances }}"

- name: Configure EC2 Instances
  hosts: launched
  connection: ssh
  become: yes
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no'

  tasks:
  - name: Install Git and Docker
    yum:
      name:
        - git
        - docker
      state: latest
      update_cache: yes
  - service:
      name: docker
      state: started
      enabled: yes
  - name: Set proper rights to Docker service
    shell: usermod -a -G docker ec2-user

  - name: Fetch eshop from Git
    git:
      repo: 'https://github.com/Ajaxspeed/zavm07_repo1.git'
      dest: ./app

  - name: Build Eshop Docker image
    docker_image:
      build:
        path: ./app
      name: eshop
      tag: latest
      source: build
  - name: Run Eshop Docker
    docker_container:
      name: eshop
      image: eshop
      state: started
      ports:
        - "80:3000"

  - name: Wait for eshop to run
    wait_for:
      port:
        80

- name: Terminate old Eshop_final instances
  hosts: localhost
  gather_facts: no

  tasks:
    - name: Get all running Eshop_final instances
      ec2_instance_info:
        aws_access_key: "{{ access_key }}"
        aws_secret_key: "{{ secret_key }}"
        security_token: "{{ session_token }}"
        region: us-east-1
        filters:
          "tag:Name": Eshop_final
      register: ec2_running_eshops

    - name: Terminate old Eshop_final instances
      ec2_instance:
        aws_access_key: "{{ access_key }}"
        aws_secret_key: "{{ secret_key }}"
        security_token: "{{ session_token }}"
        region: us-east-1
        instance_ids: "{{ item.instance_id }}"
        state: absent
      when: item.instance_id != current_instance_id.instance_id
      with_items: "{{ ec2_running_eshops.instances }}"


